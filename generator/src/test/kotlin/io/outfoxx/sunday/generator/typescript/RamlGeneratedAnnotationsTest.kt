package io.outfoxx.sunday.generator.typescript

import io.outfoxx.sunday.generator.typescript.TypeScriptTypeRegistry.Option.AddGenerationHeader
import io.outfoxx.sunday.generator.typescript.tools.TypeScriptCompiler
import io.outfoxx.sunday.generator.typescript.tools.findTypeMod
import io.outfoxx.sunday.generator.typescript.tools.generate
import io.outfoxx.sunday.generator.typescript.tools.generateTypes
import io.outfoxx.sunday.test.extensions.ResourceExtension
import io.outfoxx.sunday.test.extensions.ResourceUri
import io.outfoxx.sunday.test.extensions.TypeScriptCompilerExtension
import org.junit.jupiter.api.Assertions.assertTrue
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.extension.ExtendWith
import java.net.URI

@ExtendWith(ResourceExtension::class, TypeScriptCompilerExtension::class)
@DisplayName("[TypeScript] [RAML] Generated Annotations Test")
class RamlGeneratedAnnotationsTest {

  @Test
  fun `test generated annotation is added to root classes`(
    compiler: TypeScriptCompiler,
    @ResourceUri("raml/type-gen/general/generated-annotations.raml") testUri: URI
  ) {

    val typeRegistry = TypeScriptTypeRegistry(setOf(AddGenerationHeader))

    val typeModSpec = findTypeMod("Test@!test", generateTypes(testUri, typeRegistry, compiler))

    assertTrue(typeModSpec.toString().contains("Generated By:"))
    assertTrue(typeModSpec.toString().contains("Generated On:"))
  }

  @Test
  fun `test generated annotation is added to service class`(
    compiler: TypeScriptCompiler,
    @ResourceUri("raml/type-gen/general/generated-annotations.raml") testUri: URI
  ) {

    val typeRegistry = TypeScriptTypeRegistry(setOf(AddGenerationHeader))

    val builtTypes =
      generate(testUri, typeRegistry, compiler) { document ->
        TypeScriptSundayGenerator(
          document,
          typeRegistry,
          "http://example.com/",
          listOf("application/json")
        )
      }

    val typeModSpec = findTypeMod("Test@!test", builtTypes)

    assertTrue(typeModSpec.toString().contains("Generated By:"))
    assertTrue(typeModSpec.toString().contains("Generated On:"))
  }

}
